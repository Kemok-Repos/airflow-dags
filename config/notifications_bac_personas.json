{"1": {"message": "Notificacion", "tasks": [{"task_id": "Notificacion a Usuarios BAC Personas", "type": "Kontact", "address": "7", "message_template": null, "query_template": null, "params": {"kontact_key": "2efbc42c9f6311ea8c9b58fb844606cc"}}], "branching_query": null}, "2": {"message": "Notificacion de fallo y errores", "tasks": [{"task_id": "Notificacion de fallo y errores a Soporte", "type": "Telegram", "address": "674350416", "message_template": "<b>\ud83d\udea8  {{ dag_id }} \ud83d\udea8</b>\n<b>{{ n_errores }} errores encontrados en proceso: </b>\n{% for item in errors %}\n<code> {{item.task_id}} </code>\n{% endfor %}\n\nRealizar un diagnostico <a href=\"https://airflow.kemok.io/graph?dag_id={{ dag_id }}\">aqu\u00ed</a>.", "query_template": "WITH base AS (\nSELECT \n\tjsonb_build_object('task_id', task_id) AS errors\nFROM dag_run_error\nWHERE notified_at IS NULL\n\tAND dag_id = '{dag_id}'\n)\nSELECT \n\tjsonb_build_object('n_errores', COUNT(*), 'errors', array_agg(errors)) AS params\nFROM base\nHAVING COUNT(*) > 0\nLIMIT 1;", "params": null}], "branching_query": "SELECT DISTINCT\n\tdag_notification_tasks.task_id||' a '||dag_addresses.name AS task_id\nFROM dag_run_error\nJOIN dag_notification_tasks ON True\nJOIN dag_notification_addresses ON dag_notification_tasks.id = dag_notification_addresses.id_task\nJOIN dag_addresses ON dag_notification_addresses.id_address = dag_addresses.id\nWHERE dag_notification_tasks.id = 2 AND dag_id = '{dag_id}'\n\tAND dag_run_error.notified_at IS NULL;"}, "3": {"message": "Notificacion de fallo", "tasks": [{"task_id": "Notificacion de fallo a Grupo Telegram", "type": "Telegram", "address": "674350416", "message_template": "<b> \u26a0\ufe0f Proceso finalizado con errores \u26a0\ufe0f </b>\nNuestro equipo ya fue notificado de los {{ n_errores }} errores encontrados.", "query_template": "WITH base AS (\nSELECT \n\tjsonb_build_object('task_id', task_id) AS errors\nFROM dag_run_error\nWHERE notified_at IS NULL\n\tAND dag_id = '{dag_id}'\n)\nSELECT \n\tjsonb_build_object('n_errores', COUNT(*), 'errors', array_agg(errors)) AS params\nFROM base\nHAVING COUNT(*) > 0\nLIMIT 1;", "params": null}], "branching_query": "SELECT DISTINCT\n\tdag_notification_tasks.task_id||' a '||dag_addresses.name AS task_id\nFROM dag_run_error\nJOIN dag_notification_tasks ON True\nJOIN dag_notification_addresses ON dag_notification_tasks.id = dag_notification_addresses.id_task\nJOIN dag_addresses ON dag_notification_addresses.id_address = dag_addresses.id\nWHERE dag_notification_tasks.id = 3 AND dag_id = '{dag_id}'\n\tAND dag_run_error.notified_at IS NULL;"}, "4": {"message": "Notificacion de correccion", "tasks": [{"task_id": "Notificacion de correccion a Grupo Telegram", "type": "Telegram", "address": "674350416", "message_template": "<b>\ud83d\udd27\ud83d\udc77\ud83c\udffc\u200d\u2640\ufe0f\ud83d\udc4d\ud83c\udffc El proceso de {{ dag_id }} ya fue reparado!</b>\nTus datos estan actualizados. \ud83d\udca1", "query_template": "WITH base AS (\nSELECT \n\tjsonb_build_object('task_id', task_id) AS errors\nFROM dag_run_error\nWHERE dag_id = '{dag_id}'\n)\nSELECT \n\tjsonb_build_object('n_errores', COUNT(*)) AS params\nFROM base\nHAVING COUNT(*) > 0\nLIMIT 1;", "params": null}], "branching_query": "SELECT DISTINCT\n\tdag_notification_tasks.task_id||' a '||dag_addresses.name AS task_id\nFROM dag_run_error\nJOIN dag_notification_tasks ON True\nJOIN dag_notification_addresses ON dag_notification_tasks.id = dag_notification_addresses.id_task\nJOIN dag_addresses ON dag_notification_addresses.id_address = dag_addresses.id\nWHERE dag_notification_tasks.id = 4 AND dag_id = '{dag_id}';"}}